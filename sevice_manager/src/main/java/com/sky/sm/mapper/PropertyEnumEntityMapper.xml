<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.sky.sm.dao.PropertyEnumEntityMapper" >
  <resultMap id="BaseResultMap" type="com.sky.sm.bean.PropertyEnumEntity" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="group_no" property="groupNo" jdbcType="VARCHAR" />
    <result column="group_name" property="groupName" jdbcType="VARCHAR" />
    <result column="project" property="project" jdbcType="VARCHAR" />
    <result column="profile" property="profile" jdbcType="VARCHAR" />
    <result column="version_code" property="versionCode" jdbcType="VARCHAR" />
    <result column="version" property="version" jdbcType="INTEGER" />
    <result column="createid" property="createid" jdbcType="INTEGER" />
    <result column="ts" property="ts" jdbcType="TIMESTAMP" />
  </resultMap>
  
  <sql id="Base_Column_List" >
    pro.id, pro.group_no, pro.group_name, pro.project, pro.`profile`, pro.version_code, pro.version, pro.createid, pro.ts
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from property_enum pro
    where pro.id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from property_enum
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.sky.sm.bean.PropertyEnumEntity" useGeneratedKeys="true" keyProperty="id">
    insert into property_enum (id, group_no, group_name, 
      project, `profile`, version_code,
      version, createid, ts
      )
    values (#{id,jdbcType=INTEGER}, #{groupNo,jdbcType=VARCHAR}, #{groupName,jdbcType=VARCHAR}, 
      #{project,jdbcType=VARCHAR}, #{profile,jdbcType=VARCHAR}, #{versionCode,jdbcType=VARCHAR}, 
      #{version,jdbcType=INTEGER}, #{createid,jdbcType=INTEGER}, now()
      )
      ON DUPLICATE KEY UPDATE value = VALUES(value),version = version+1,ts=now()
  </insert>
  <insert id="insertBatch" parameterType="java.util.List" useGeneratedKeys="true" keyProperty="id">
    insert into property_enum ( group_no, group_name,  project, `profile`,
    	 version_code,version, createid, ts
      )
      <foreach collection="list" item="it" separator="," open="values ">
       (	 #{it.groupNo,jdbcType=VARCHAR}, #{it.groupName,jdbcType=VARCHAR}, #{it.project,jdbcType=VARCHAR}, #{it.profile,jdbcType=VARCHAR}, 
       		#{it.versionCode,jdbcType=VARCHAR},IFNULL(#{it.version,jdbcType=INTEGER},0), #{it.createid,jdbcType=INTEGER}, now()
      )
      </foreach>
      ON DUPLICATE KEY UPDATE value = VALUES(value),version = version+1,ts=now()
  </insert>
  <insert id="insertSelective" parameterType="com.sky.sm.bean.PropertyEnumEntity" useGeneratedKeys="true" keyProperty="id">
    insert into property_enum
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="groupNo != null" >       group_no,     		</if>
      <if test="groupName != null" >     group_name,      	</if>
      <if test="project != null" >      project,      	</if>
      <if test="profile != null" >      `profile`,     	</if>
      <if test="versionCode != null" >	version_code,	</if>
      <if test="createid != null" >     createid,      	</if>
      									version,      
              							ts     
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="groupNo != null" >        	#{groupNo,jdbcType=VARCHAR},      		</if>
      <if test="groupName != null" >        #{groupName,jdbcType=VARCHAR},      	</if>
      <if test="project != null" >      #{project,jdbcType=VARCHAR},      	</if>
      <if test="profile != null" >      #{profile,jdbcType=VARCHAR},      	</if>
      <if test="versionCode != null" >	#{versionCode,jdbcType=VARCHAR},	</if>
      <if test="createid != null" >     #{createid,jdbcType=INTEGER},      	</if>
      									0,
      									now()
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.sky.sm.bean.PropertyEnumEntity" >
    update property_enum
    <set >
      <if test="groupNo != null" >       group_no 	= #{groupNo,jdbcType=VARCHAR},      	</if>
      <if test="groupName != null" >     group_name	= #{groupName,jdbcType=VARCHAR},     </if>
      <if test="project != null" >      project 	= #{project,jdbcType=VARCHAR},      </if>
      <if test="profile != null" >      `profile` 	= #{profile,jdbcType=VARCHAR},      </if>
      <if test="versionCode != null" >	version_code= #{versionCode,jdbcType=VARCHAR},	</if>
      <if test="createid != null" >     createid 	= #{createid,jdbcType=INTEGER},     </if>
      									version 	= version+1,      					
      				 					ts 			= now()
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.sky.sm.bean.PropertyEnumEntity" >
    update property_enum
    set group_no 	= #{groupNo,jdbcType=VARCHAR},
      group_name 	= #{groupName,jdbcType=VARCHAR},
      project		= #{project,jdbcType=VARCHAR},
      `profile`		= #{profile,jdbcType=VARCHAR},
      version_code 	= #{versionCode,jdbcType=VARCHAR},
      createid 		= #{createid,jdbcType=INTEGER},
      version 		= version+1,
      ts 			= now()
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <sql id="query-item">
  		<include refid="simple-query-item"/>
	  	<if test="pro.profile !=null and pro.profile !=''">				`profile` =#{pro.profile} and							</if>
	  	<if test="pro.versionCode !=null and pro.versionCode !=''">		version_code =#{pro.versionCode} and					</if>
  </sql>
  <sql id="simple-query-item">
  		<if test="pro.project !=null and pro.project !=''">				project 		=#{pro.project} and						</if>
  		<if test="pro.groupNo !=null and pro.groupNo !=''">				group_no 		=#{pro.groupNo} and						</if>
  </sql>

  <sql id="query_contation">
  	<trim prefix=" where " suffixOverrides="and | or">
  		<include refid="query-item"/>
  	</trim>
  </sql>
  <sql id="base-change-table">
  		select  <include refid="Base_Column_List" />
    	from property_enum pro
  </sql>

	<!-- 查询配置属性枚举 -->  
  <select id="queryPropertyEnums" resultMap="BaseResultMap">
    <include refid="base-change-table"/>
    <include refid="query_contation"/>
  </select>
	<!-- 分页查询配置属性枚举 -->  
  <select id="queryPropertyEnumList" resultMap="BaseResultMap" >
  	<include refid="base-change-table"/>
    <include refid="query_contation"/>
    <if test="page !=null and page.current !=null and page.pageSize !=null">
    	limit #{page.current},#{page.pageSize}
    </if>
  </select>
  <!-- 根据条件统计配置属性枚举数据数量 -->
  <select id="accoutPropertyEnums" resultType="java.lang.Integer">
  	select  count(1)
    from property_enum
    <include refid="query_contation"/>
  </select>

</mapper>